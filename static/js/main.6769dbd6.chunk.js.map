{"version":3,"sources":["components/Button.js","components/DisplayTime.js","redux/actionType.js","containers/Stopwatch.js","redux/action.js","App.js","redux/reducer.js","index.js"],"names":["Button","buttonTitle","onclick","className","onClick","formatTime","secs","min","Math","floor","retMin","sec","retSec","DisplayTime","count","actionType","incrementer","nextCount","connect","state","isStart","doReset","dispatch","start","type","stop","reset","props","useState","checker","toggleChecker","setCount","prevProps","useRef","startTimer","setInterval","useEffect","current","clearInterval","console","log","App","INITIAL_STATE","store","createStore","action","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAYeA,EAVA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QAC3B,OACI,qBAAKC,UAAU,SAAf,SACI,wBACAC,QAAS,kBAAMF,KADf,SAEED,OCLRI,EAAa,SAACC,GAChB,IAAMC,EAAMC,KAAKC,MAAMH,EAAO,IACxBI,EAASH,EAAM,GAAN,WAAeA,GAAf,UAA0BA,GACnCI,EAAMH,KAAKC,MAAMH,EAAO,IACxBM,EAASD,EAAM,GAAN,WAAeA,GAAf,UAA0BA,GACzC,MAAM,GAAN,OAAUD,EAAV,YAAoBE,IAWTC,EARK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACI,qBAAKX,UAAU,cAAf,SACI,6BAAME,EAAWS,Q,OCbhBC,EACF,cADEA,EAEH,aAFGA,EAGF,cCGPC,EAAc,KACdC,EAAY,EA2FDC,eAPS,SAACC,GACrB,MAAO,CACHC,QAASD,EAAMC,QACfC,QAASF,EAAME,YAXI,SAACC,GACxB,MAAO,CACHC,MAAO,kBAAMD,EClFV,CACHE,KAAMT,KDkFNU,KAAK,kBAAIH,EC7EN,CACHE,KAAMT,KD6ENW,MAAM,kBAAIJ,ECxEP,CACHE,KAAMT,QDkFCG,EAzFG,SAACS,GAGf,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOd,EAAP,KAAciB,EAAd,KACIC,EAAYC,iBAAO,CAACb,SAAQ,EAAKC,SAAQ,IAUvCa,EAAY,WACdlB,EAAcmB,aAAY,WARtBR,EAAMP,SAIVW,EADAd,GAAwB,KAOtB,MAcNmB,qBAAU,WAiBN,OAhBGT,EAAMP,UAAYY,EAAUK,QAAQjB,UAEhCO,EAAMP,QACLc,IAdRI,cAActB,IAoBXW,EAAMN,UAAYW,EAAUK,QAAQhB,SAEhCM,EAAMN,UAlBbiB,cAActB,GAEde,EADAd,EAAY,GAEZsB,QAAQC,IAAI,UAoBL,WACHR,EAAUK,QAAQjB,QAAUO,EAAMP,QAClCY,EAAUK,QAAQhB,QAAUM,EAAMN,WAGvC,CAACQ,IAKJ,OACI,sBAAK1B,UAAU,YAAf,UACI,2CACA,cAAC,EAAD,CAAaW,MAAQA,IACrB,sBAAKX,UAAU,UAAUC,QAPnB,kBAAK0B,GAAeD,IAO1B,UACKF,EAAMP,QACN,cAAC,EAAD,CAAQnB,YAAY,OAAOC,QAASyB,EAAMF,OACxC,cAAC,EAAD,CAAQxB,YAAY,QAAQC,QAASyB,EAAMJ,QAC9C,cAAC,EAAD,CAAQtB,YAAY,QAAQC,QAASyB,EAAMD,iBEjE5Ce,MATf,WAEE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,O,cCJAuC,EAAgB,CAClBtB,SAAS,EACTC,SAAS,G,iBCKPsB,EAAQC,aDDO,WAAkC,IAAjCzB,EAAgC,uDAAzBuB,EAAcG,EAAW,uCAClD,OAAOA,EAAOrB,MACV,KAAKT,EACD,OAAO,2BAAII,GAAX,IAAkBC,SAAS,EAAKC,SAAQ,IAC5C,KAAKN,EACD,OAAO,2BAAII,GAAX,IAAkBC,SAAS,EAAMC,SAAQ,IAC7C,KAAKN,EACD,OAAO,2BAAII,GAAX,IAAkBC,SAAS,EAAOC,SAAS,IAC/C,QACI,OAAOF,KCRa2B,IAAe,WAAf,EAAmB,CAACC,OAEpDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIFQ,SAASC,eAAe,W","file":"static/js/main.6769dbd6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({ buttonTitle, onclick }) =>{\r\n    return(\r\n        <div className='Button'>\r\n            <button\r\n            onClick={() => onclick() }\r\n            >{buttonTitle}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst formatTime = (secs) => {\r\n    const min = Math.floor(secs / 60);\r\n    const retMin = min < 10 ? `0${min}` : `${min}`;\r\n    const sec = Math.floor(secs % 60);\r\n    const retSec = sec < 10 ? `0${sec}` : `${sec}`;\r\n    return `${retMin}:${retSec}`;\r\n}\r\n\r\nconst DisplayTime = ({ count }) => {\r\n    return (\r\n        <div className='displayTime'>\r\n            <h1>{ formatTime(count) }</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayTime;\r\n","export const actionType = {\r\n    START: \"TIMER/START\",\r\n    STOP: \"TIMER/STOP\",\r\n    RESET: \"TIMER/RESET\"\r\n}","import React, { useState,useEffect,useRef } from 'react';\r\nimport Button from '../components/Button';\r\nimport DisplayTime from '../components/DisplayTime';\r\nimport { connect } from 'react-redux';\r\nimport { startAction, stopAction, resetAction } from '../redux/action';\r\n\r\nvar incrementer = null;\r\nvar nextCount = 0;\r\n\r\nconst Stopwatch = (props) => {\r\n\r\n    \r\n    const [checker, toggleChecker] = useState(true);\r\n    const [count, setCount] = useState(0);\r\n    var prevProps = useRef({isStart:true,doReset:false})\r\n\r\n    const increase = () =>{\r\n        if(!props.isStart){\r\n            return;\r\n        }\r\n        nextCount = nextCount + 1;\r\n        setCount(nextCount);\r\n    }\r\n\r\n    const startTimer =()=>{\r\n        incrementer = setInterval(()=>{\r\n            increase();\r\n        },1000);\r\n    }\r\n\r\n    const stopTimer=()=>{\r\n        clearInterval(incrementer);\r\n    }\r\n\r\n    const resetTimer=()=>{\r\n        clearInterval(incrementer);\r\n        nextCount = 0;\r\n        setCount(nextCount);\r\n        console.log(\"reset\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(props.isStart !== prevProps.current.isStart)\r\n        {\r\n            if(props.isStart){\r\n                startTimer();\r\n            }else{\r\n                stopTimer();\r\n            }\r\n        }\r\n        \r\n        if(props.doReset !== prevProps.current.doReset)\r\n        {\r\n            if(props.doReset){\r\n                resetTimer();\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            prevProps.current.isStart = props.isStart;\r\n            prevProps.current.doReset = props.doReset;\r\n        }\r\n        \r\n    }, [checker]);\r\n\r\n    const effect =()=> toggleChecker(!checker);\r\n  \r\n    \r\n    return (\r\n        <div className=\"Stopwatch\">\r\n            <h1>Stopwatch</h1>\r\n            <DisplayTime count={ count }/>\r\n            <div className='buttons' onClick={effect}>\r\n                {props.isStart? \r\n                (<Button buttonTitle='Stop' onclick={props.stop} />) \r\n                : (<Button buttonTitle='Start' onclick={props.start} />)}\r\n                <Button buttonTitle='Reset' onclick={props.reset} />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        start: () => dispatch(startAction()),\r\n        stop:()=>dispatch(stopAction()),\r\n        reset:()=>dispatch(resetAction())\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isStart: state.isStart,\r\n        doReset: state.doReset\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Stopwatch);\r\n\r\n","import {actionType} from \"./actionType\";\r\n\r\nexport const startAction = (action) =>{\r\n    return {\r\n        type: actionType.START\r\n    }\r\n}\r\n\r\nexport const stopAction = (action) =>{\r\n    return {\r\n        type: actionType.STOP\r\n    }\r\n}\r\n\r\nexport const resetAction = (action) =>{\r\n    return {\r\n        type: actionType.RESET\r\n    }\r\n}","import Stopwatch from \"./containers/Stopwatch\";\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Stopwatch />\n    </div>\n  );\n}\n\nexport default App;\n","import {actionType} from \"./actionType\";\r\n\r\nconst INITIAL_STATE = {\r\n    isStart: false,\r\n    doReset: true\r\n}\r\n\r\n\r\nexport const timer = (state= INITIAL_STATE,action) => {\r\n    switch(action.type){\r\n        case actionType.START:\r\n            return {...state, isStart: true,doReset:false}\r\n        case actionType.STOP:\r\n            return {...state, isStart: false,doReset:false}\r\n        case actionType.RESET:\r\n            return {...state, isStart: false, doReset: true}\r\n        default:\r\n            return state\r\n    }\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware } from 'redux';\nimport { timer } from './redux/reducer';\nimport logger from 'redux-logger';\n\nconst store = createStore(timer,applyMiddleware(...[logger]))\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}